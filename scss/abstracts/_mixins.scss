// ===========================
//	Mixin definitions
// ===========================

// transfrom
@mixin transform($property) {
    transform: $property;
  }
  // border-radius
  @mixin border-radius($radius) {
    border-radius: $radius;
  }
  
  //usage: @include shift([property],[duration],[easing]);
  @mixin transition($property: all, $duration: 0.4s, $ease: ease-in-out) {
    transition: $property $duration $ease;
  }
  
  // background-content
  @mixin background-content(
    $repeat: no-repeat,
    $size: cover,
    $position: center center
  ) {
    background-repeat: $repeat;
    background-size: $size;
    background-position: $position;
  }
  
  @mixin background-color($color) {
    background-color: $color;
  }
  
  // flex position
  @mixin flex-position($display, $content, $items) {
    display: $display;
    justify-content: $content;
    align-items: $items;
  }
  
  // absolute-left-top
  @mixin absolute-left-top($position: absolute, $left: 0, $top: 0) {
    position: $position;
    left: $left;
    top: $top;
  }
  
  // absolute-left-bottom
  @mixin absolute-left-bottom($position: absolute, $left: 0, $bottom: 0) {
    position: $position;
    left: $left;
    bottom: $bottom;
  }
  
  // absolute-right-top
  @mixin absolute-right-top($position: absolute, $right: 0, $top: 0) {
    position: $position;
    right: $right;
    top: $top;
  }
  
  // absolute-right-bottom
  @mixin absolute-right-bottom($position: absolute, $right: 0, $bottom: 0) {
    position: $position;
    right: $right;
    bottom: $bottom;
  }
  // absolute-all-side
  @mixin absolute-all-side($position: absolute, $top: 0, $left: 0, $right: 0,$bottom: 0) {
    position: $position;
    top: $top;
    left: $left;
    right: $right;
    bottom: $bottom;
  }
  
  // center position
  @mixin center-position($top: 50%, $left: 50%) {
    top: $top;
    left: $left;
    transform: translate(-#{$top}, -#{$left});
  }
  
  // Square
  @mixin square($size, $radius: 0) {
    width: $size;
    height: $size;
  
    @if $radius != 0 {
      border-radius: $radius;
    }
  }
  
  // Functions
  @mixin toRem($property, $value) {
    #{$property}: calc($value / 16) + rem;
  }
  
  // Functions
  @function calculateRem($size) {
    $vwSize: $size / 4px;
    @return $vwSize * 1vw;
  }
  
  //   Font Size Convert To Rem
  @mixin font-size($size) {
    font-size: $size;
    font-size: calculateRem($size);
  }
  
  // media quaries
  @mixin breakpoint($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
      @media #{inspect(map-get($breakpoints, $breakpoint))} {
        @content;
      }
    } @else {
      @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
            + "Available breakpoints are: #{map-keys($breakpoints)}.";
    }
  }

  // media quaries min width

  @mixin media-only($width, $type: min) {
    @if map_has_key($breakpoint, $width) {
        $width: map_get($breakpoint, $width);
    }

    @if $type == max {
        $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) {
        @content;
    }
  }

  //Responsive from min to max

  @mixin media-from-to($width, $type: min, $width2, $type2: max ) {
    @if map_has_key($breakpoints, $width) {
        $width: map_get($breakpoints, $width);
    }

    @if $type == max {
        $width: $width - 1px;
    }
    @media only screen and (#{$type}-width: $width) and (#{$type2}-width: $width2) {
        @content;
    }
  }


//-------------------- Responsive 2 --------------------//
// Possible $media Values: small-mobile, modile, large-mobile, tablet, notbook, wide
// Usage @include respond-to(mobile) {
//   .h1 {
//     font-size: 30px;
//   }
// };